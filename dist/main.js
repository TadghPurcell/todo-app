(()=>{"use strict";var e={151:(e,t,n)=>{n.d(t,{Z:()=>m});var r=n(537),o=n.n(r),a=n(645),i=n.n(a),c=n(667),l=n.n(c),s=new URL(n(985),n.b),d=new URL(n(48),n.b),u=new URL(n(540),n.b),A=i()(o()),p=l()(s),g=l()(d),f=l()(u);A.push([e.id,'@font-face{font-family:"Rubik";src:url('+p+")}*{margin:0;padding:0;box-sizing:inherit}:root{--dark-text: rgb(65, 69, 81);--light-text: rgb(130, 132, 144);--hover-link: rgb(45, 109, 212);--background-col: rgb(246 247 251);--sidebar-col: rgb(26, 26, 33);--box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.075)}body{box-sizing:border-box}.hidden{display:none}button{padding:25px;border:none;cursor:pointer}.project__btn.active{color:var(--hover-link)}button:focus{color:red}svg{height:20px;width:20px}.btn-complete{height:10px;width:100px;background-color:inherit;border:none}.btn-complete::before{content:url("+g+");height:100px;width:100px;display:block}.btn-complete[complete=false]{background-image:url("+f+')}button,input{font-family:inherit;padding:0;margin:0;box-sizing:inherit;font-size:inherit}form{position:fixed;top:50%;left:50%}.main{border:1px solid #000;background-color:var(--background-col);display:grid;grid-template-columns:1fr;grid-auto-rows:max-content;gap:16px}.main__item{display:flex;align-items:center;justify-content:space-around}header{border:1px solid #000;grid-column:2/3;min-height:75px;display:flex;align-items:center;padding-left:50px;color:var(--light-text);background-color:var(--background-col)}html{height:100%}body{height:inherit;display:grid;grid-template-columns:1fr 4fr;grid-template-rows:max-content 1fr;font-family:"Rubik",Arial,sans-serif}.sidebar,.sidebar__general,.sidebar__projects{display:flex;flex-direction:column;display:flex;flex-direction:column}.sidebar{border:1px solid #000;padding:50px;gap:50px;background-color:var(--sidebar-col);grid-row:1/3}.sidebar__general{color:red}.sidebar__projects{color:var(--light-text)}.sidebar__projects--container{display:flex;flex-direction:column}.sidebar__btn{color:var(--light-text);background-color:inherit}.project__btn{text-transform:capitalize;color:var(--light-text);background-color:inherit}.add-project{color:var(--light-text);background-color:inherit}.add-project:hover{color:var(--hover-link)}',"",{version:3,sources:["webpack://./src/sass/base/typography.scss","webpack://./src/sass/base/base.scss","webpack://./src/sass/components/button.scss","webpack://./src/sass/components/form.scss","webpack://./src/sass/layout/content.scss","webpack://./src/sass/layout/header.scss","webpack://./src/sass/layout/page.scss","webpack://./src/sass/layout/sidebar.scss"],names:[],mappings:"AAAA,WACE,mBAAA,CACA,2CAAA,CCFF,EACE,QAAA,CACA,SAAA,CACA,kBAAA,CAGF,MACE,4BAAA,CACA,gCAAA,CACA,+BAAA,CACA,kCAAA,CACA,8BAAA,CACA,8CAAA,CAGF,KACE,qBAAA,CAGF,QACE,YAAA,CCpBF,OACE,YAAA,CACA,WAAA,CACA,cAAA,CAIF,qBACE,uBAAA,CAGF,aACE,SAAA,CAGF,IACE,WAAA,CACA,UAAA,CAGF,cACE,WAAA,CACA,WAAA,CACA,wBAAA,CACA,WAAA,CAGF,sBACE,+CAAA,CAEA,YAAA,CACA,WAAA,CACA,aAAA,CAGF,8BACE,wDAAA,CCpCF,aAEE,mBAAA,CACA,SAAA,CACA,QAAA,CACA,kBAAA,CACA,iBAAA,CAGF,KACE,cAAA,CACA,OAAA,CACA,QAAA,CCZF,MACE,qBAAA,CACA,sCAAA,CACA,YAAA,CACA,yBAAA,CACA,0BAAA,CACA,QAAA,CAEA,YACE,YAAA,CACA,kBAAA,CACA,4BAAA,CCXJ,OACE,qBAAA,CACA,eAAA,CACA,eAAA,CACA,YAAA,CACA,kBAAA,CACA,iBAAA,CACA,uBAAA,CACA,sCAAA,CCRF,KACE,WAAA,CAGF,KACE,cAAA,CACA,YAAA,CACA,6BAAA,CACA,kCAAA,CACA,oCAAA,CCTF,8CAGE,YAAA,CACA,qBAAA,CACA,YAAA,CACA,qBAAA,CAGF,SACE,qBAAA,CACA,YAAA,CACA,QAAA,CACA,mCAAA,CACA,YAAA,CAEA,kBACE,SAAA,CAGF,mBACE,uBAAA,CAEA,8BACE,YAAA,CACA,qBAAA,CAIJ,cACE,uBAAA,CACA,wBAAA,CAKF,cACE,yBAAA,CACA,uBAAA,CACA,wBAAA,CAIJ,aACE,uBAAA,CACA,wBAAA,CACA,mBACE,uBAAA",sourcesContent:["@font-face {\n  font-family: 'Rubik';\n  src: url(../../fonts/Rubik-VariableFont_wght.ttf);\n}\n","* {\n  margin: 0;\n  padding: 0;\n  box-sizing: inherit;\n}\n\n:root {\n  --dark-text: rgb(65, 69, 81);\n  --light-text: rgb(130, 132, 144);\n  --hover-link: rgb(45, 109, 212);\n  --background-col: rgb(246 247 251);\n  --sidebar-col: rgb(26, 26, 33);\n  --box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.075);\n}\n\nbody {\n  box-sizing: border-box;\n}\n\n.hidden {\n  display: none;\n}\n","button {\n  padding: 25px;\n  border: none;\n  cursor: pointer;\n  //   background: white;\n}\n\n.project__btn.active {\n  color: var(--hover-link);\n}\n\nbutton:focus {\n  color: red;\n}\n\nsvg {\n  height: 20px;\n  width: 20px;\n}\n\n.btn-complete {\n  height: 10px;\n  width: 100px;\n  background-color: inherit;\n  border: none;\n}\n\n.btn-complete::before {\n  content: url('../img/IMG_20230106_112758.jpg');\n\n  height: 100px;\n  width: 100px;\n  display: block;\n}\n\n.btn-complete[complete='false'] {\n  background-image: url('../img/checkCircleOutline.svg');\n}\n","button,\ninput {\n  font-family: inherit;\n  padding: 0;\n  margin: 0;\n  box-sizing: inherit;\n  font-size: inherit;\n}\n\nform {\n  position: fixed;\n  top: 50%;\n  left: 50%;\n}\n",".main {\n  border: 1px solid #000;\n  background-color: var(--background-col);\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-auto-rows: max-content;\n  gap: 16px;\n\n  &__item {\n    display: flex;\n    align-items: center;\n    justify-content: space-around;\n  }\n}\n","header {\n  border: 1px solid #000;\n  grid-column: 2 / 3;\n  min-height: 75px;\n  display: flex;\n  align-items: center;\n  padding-left: 50px;\n  color: var(--light-text);\n  background-color: var(--background-col);\n}\n","html {\n  height: 100%;\n}\n\nbody {\n  height: inherit;\n  display: grid;\n  grid-template-columns: 1fr 4fr;\n  grid-template-rows: max-content 1fr;\n  font-family: 'Rubik', Arial, sans-serif;\n}\n",".sidebar,\n.sidebar__general,\n.sidebar__projects {\n  display: flex;\n  flex-direction: column;\n  display: flex;\n  flex-direction: column;\n}\n\n.sidebar {\n  border: 1px solid #000;\n  padding: 50px;\n  gap: 50px;\n  background-color: var(--sidebar-col);\n  grid-row: 1 / 3;\n\n  &__general {\n    color: red;\n  }\n\n  &__projects {\n    color: var(--light-text);\n\n    &--container {\n      display: flex;\n      flex-direction: column;\n    }\n  }\n\n  &__btn {\n    color: var(--light-text);\n    background-color: inherit;\n  }\n}\n\n.project {\n  &__btn {\n    text-transform: capitalize;\n    color: var(--light-text);\n    background-color: inherit;\n  }\n}\n\n.add-project {\n  color: var(--light-text);\n  background-color: inherit;\n  &:hover {\n    color: var(--hover-link);\n  }\n}\n"],sourceRoot:""}]);const m=A},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var c=0;c<this.length;c++){var l=this[c][0];null!=l&&(i[l]=!0)}for(var s=0;s<e.length;s++){var d=[].concat(e[s]);r&&i[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),t.push(d))}},t}},667:e=>{e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]|(%20)/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var a={},i=[],c=0;c<e.length;c++){var l=e[c],s=r.base?l[0]+r.base:l[0],d=a[s]||0,u="".concat(s," ").concat(d);a[s]=d+1;var A=n(u),p={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==A)t[A].references++,t[A].updater(p);else{var g=o(p,r);r.byIndex=c,t.splice(c,0,{identifier:u,updater:g,references:1})}i.push(u)}return i}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var c=n(a[i]);t[c].references--}for(var l=r(e,o),s=0;s<a.length;s++){var d=n(a[s]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}a=l}}},569:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},985:(e,t,n)=>{e.exports=n.p+"img/Rubik-VariableFont_wght.ttf"},48:(e,t,n)=>{e.exports=n.p+"img/IMG_20230106_112758.jpg"},540:(e,t,n)=>{e.exports=n.p+"img/checkCircleOutline.svg"}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={id:r,exports:{}};return e[r](a,a.exports,n),a.exports}n.m=e,n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),n.b=document.baseURI||self.location.href,n.nc=void 0,(()=>{var e=n(379),t=n.n(e),r=n(795),o=n.n(r),a=n(569),i=n.n(a),c=n(565),l=n.n(c),s=n(216),d=n.n(s),u=n(589),A=n.n(u),p=n(151),g={};g.styleTagTransform=A(),g.setAttributes=l(),g.insert=i().bind(null,"head"),g.domAPI=o(),g.insertStyleElement=d(),t()(p.Z,g),p.Z&&p.Z.locals&&p.Z.locals;let f=[];class m{constructor(e="test",t="test",n,r,o){this.title=e,this.desc=t,this.dueDate=n,this.priority=r,this.project=o,this.dateCreated=+new Date,this.index,this.complete=!1}}function C(){f=[];for(const e of Object.values(localStorage))for(const t of Object.values(JSON.parse(e)))f.push(t);return f.sort(((e,t)=>t.dateCreated-e.dateCreated))}function b(e){const t=JSON.parse(localStorage.getItem(e.currentTarget.parentNode.lastChild.textContent));for(const n of Object.values(t))n.title===e.currentTarget.nextSibling.textContent&&(n.complete=!n.complete,n.complete?e.currentTarget.attributes.complete.value="false":e.currentTarget.attributes.complete.value="true",n.complete?e.currentTarget.textContent="complete":e.currentTarget.textContent="not complete",localStorage.setItem(e.currentTarget.parentNode.lastChild.textContent,JSON.stringify(t)));return console.log(localStorage[e.currentTarget.parentNode.lastChild.textContent]),C()}function h(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function v(e){return v="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},v(e)}function x(e){h(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"===v(e)&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function y(e){h(1,arguments);var t=x(e);return t.setHours(0,0,0,0),t}Math.pow(10,8);var w=6e4,S=36e5;function k(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function E(e,t){var n;h(1,arguments);var r=k(null!==(n=null==t?void 0:t.additionalDigits)&&void 0!==n?n:2);if(2!==r&&1!==r&&0!==r)throw new RangeError("additionalDigits must be 0, 1 or 2");if("string"!=typeof e&&"[object String]"!==Object.prototype.toString.call(e))return new Date(NaN);var o,a=function(e){var t,n={},r=e.split(N.dateTimeDelimiter);if(r.length>2)return n;if(/:/.test(r[0])?t=r[0]:(n.date=r[0],t=r[1],N.timeZoneDelimiter.test(n.date)&&(n.date=e.split(N.timeZoneDelimiter)[0],t=e.substr(n.date.length,e.length))),t){var o=N.timezone.exec(t);o?(n.time=t.replace(o[1],""),n.timezone=o[1]):n.time=t}return n}(e);if(a.date){var i=function(e,t){var n=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+t)+"})|(\\d{2}|[+-]\\d{"+(2+t)+"})$)"),r=e.match(n);if(!r)return{year:NaN,restDateString:""};var o=r[1]?parseInt(r[1]):null,a=r[2]?parseInt(r[2]):null;return{year:null===a?o:100*a,restDateString:e.slice((r[1]||r[2]).length)}}(a.date,r);o=function(e,t){if(null===t)return new Date(NaN);var n=e.match(_);if(!n)return new Date(NaN);var r=!!n[4],o=L(n[1]),a=L(n[2])-1,i=L(n[3]),c=L(n[4]),l=L(n[5])-1;if(r)return function(e,t,n){return t>=1&&t<=53&&n>=0&&n<=6}(0,c,l)?function(e,t,n){var r=new Date(0);r.setUTCFullYear(e,0,4);var o=7*(t-1)+n+1-(r.getUTCDay()||7);return r.setUTCDate(r.getUTCDate()+o),r}(t,c,l):new Date(NaN);var s=new Date(0);return function(e,t,n){return t>=0&&t<=11&&n>=1&&n<=(B[t]||(F(e)?29:28))}(t,a,i)&&function(e,t){return t>=1&&t<=(F(e)?366:365)}(t,o)?(s.setUTCFullYear(t,a,Math.max(o,i)),s):new Date(NaN)}(i.restDateString,i.year)}if(!o||isNaN(o.getTime()))return new Date(NaN);var c,l=o.getTime(),s=0;if(a.time&&(s=function(e){var t=e.match(T);if(!t)return NaN;var n=D(t[1]),r=D(t[2]),o=D(t[3]);return function(e,t,n){return 24===e?0===t&&0===n:n>=0&&n<60&&t>=0&&t<60&&e>=0&&e<25}(n,r,o)?n*S+r*w+1e3*o:NaN}(a.time),isNaN(s)))return new Date(NaN);if(!a.timezone){var d=new Date(l+s),u=new Date(0);return u.setFullYear(d.getUTCFullYear(),d.getUTCMonth(),d.getUTCDate()),u.setHours(d.getUTCHours(),d.getUTCMinutes(),d.getUTCSeconds(),d.getUTCMilliseconds()),u}return c=function(e){if("Z"===e)return 0;var t=e.match(j);if(!t)return 0;var n="+"===t[1]?-1:1,r=parseInt(t[2]),o=t[3]&&parseInt(t[3])||0;return function(e,t){return t>=0&&t<=59}(0,o)?n*(r*S+o*w):NaN}(a.timezone),isNaN(c)?new Date(NaN):new Date(l+s+c)}var N={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},_=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,T=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,j=/^([+-])(\d{2})(?::?(\d{2}))?$/;function L(e){return e?parseInt(e):1}function D(e){return e&&parseFloat(e.replace(",","."))||0}var B=[31,null,31,30,31,30,31,31,30,31,30,31];function F(e){return e%400==0||e%4==0&&e%100!=0}var O={};function I(){return O}function M(e,t){var n,r,o,a,i,c,l,s;h(1,arguments);var d=I(),u=k(null!==(n=null!==(r=null!==(o=null!==(a=null==t?void 0:t.weekStartsOn)&&void 0!==a?a:null==t||null===(i=t.locale)||void 0===i||null===(c=i.options)||void 0===c?void 0:c.weekStartsOn)&&void 0!==o?o:d.weekStartsOn)&&void 0!==r?r:null===(l=d.locale)||void 0===l||null===(s=l.options)||void 0===s?void 0:s.weekStartsOn)&&void 0!==n?n:0);if(!(u>=0&&u<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var A=x(e),p=A.getDay(),g=(p<u?7:0)+p-u;return A.setDate(A.getDate()-g),A.setHours(0,0,0,0),A}const q=(()=>{const e=document.querySelector("main"),t=(document.querySelector("aside"),document.querySelector(".sidebar__projects--container")),n=document.querySelector(".new-project-form"),r=document.querySelector(".new-todo-form");function o(e){const t=document.createElement("div");t.classList.add("main__item"),t.setAttribute("data-index",`${e.index}`);const n=document.createElement("h3");n.classList.add("title"),n.textContent=`${e.title||""}`;const r=document.createElement("p");r.classList.add("desc"),r.textContent=`${e.desc||""}`;const o=document.createElement("p");o.classList.add("due-date"),o.textContent=`${e.dueDate||""}`;const a=document.createElement("p");a.classList.add("priority"),a.textContent=`${e.priority||""}`;const i=document.createElement("button");i.classList.add("btn-complete"),i.setAttribute("complete",e.complete?"true":"false"),i.textContent=e.complete?i.textContent="complete":i.textContent="not complete";const c=document.createElement("button");c.classList.add("btn-delete"),c.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" viewBox="4 3 16 18"><path d="M9,3V4H4V6H5V19A2,2 0 0,0 7,21H17A2,2 0 0,0 19,19V6H20V4H15V3H9M7,6H17V19H7V6M9,8V17H11V8H9M13,8V17H15V8H13Z" /></svg>';const l=document.createElement("div");return l.textContent=e.project,l.classList.add("hidden"),t.appendChild(i),t.appendChild(n),t.appendChild(r),t.appendChild(o),t.appendChild(a),t.appendChild(c),t.appendChild(l),t}function a(t){let n;const r=[];if(JSON.parse(localStorage.getItem(t))){n=JSON.parse(localStorage.getItem(t));for(const[e,t]of Object.entries(n))r.push(t);r.sort(((e,t)=>t.dateCreated-e.dateCreated)).forEach((t=>e.appendChild(o(t))))}}return{main:e,clearFormInputs:function(e){e.preventDefault(),e.target.form.length>3?(e.target.form.title.value="",e.target.form.desc.value="",e.target.form["due-date"].value="",e.target.form.priority.value=""):e.target.form.title.value=""},toggleModal:function(e){"add-project"===e.target.classList.value&&(n.classList.toggle("hidden"),r.classList.add("hidden")),"btn-add-todo"===e.target.classList.value&&(r.classList.toggle("hidden"),n.classList.add("hidden"))},sidebarProjectSection:t,printProjectButtonsSidebar:function(){for(const e of Object.keys(localStorage).map((e=>e.toLowerCase())).sort()){const n=document.createElement("button");n.classList.add("sidebar__btn",`project__${e}`),n.textContent=e,t.appendChild(n)}},newProjectForm:n,newToDoForm:r,printProject:a,printSidebarLink:function(t){e.innerHTML="","all"===t&&C().forEach((t=>e.appendChild(o(t)))),"today"===t&&C().filter((e=>function(e){return h(1,arguments),function(e,t){h(2,arguments);var n=y(e),r=y(t);return n.getTime()===r.getTime()}(e,Date.now())}(E(e.dueDate)))).forEach((t=>e.appendChild(o(t)))),"this week"===t&&C().filter((e=>function(e,t){return h(1,arguments),function(e,t,n){h(2,arguments);var r=M(e,n),o=M(t,n);return r.getTime()===o.getTime()}(e,Date.now(),t)}(E(e.dueDate)))).forEach((t=>e.appendChild(o(t)))),"important"===t&&C().filter((e=>"high"===e.priority)).forEach((t=>e.appendChild(o(t)))),"complete"===t&&C().filter((e=>e.complete)).forEach((t=>e.appendChild(o(t)))),localStorage.hasOwnProperty(t)&&a(t)}}})(),H=q,U=(()=>{const e=document.querySelector("#desc"),t=document.querySelector("#due-date"),n=document.querySelector("#priority"),r=document.querySelector(".add-project"),o=document.querySelector(".btn-add-todo"),a=document.querySelector(".new-todo"),i=document.querySelector(".btn-reset-project"),c=document.querySelector(".btn-reset-form"),l=document.querySelector(".btn-create-project");function s(e){e.forEach((t=>{t.addEventListener("click",(function(){e.forEach((e=>e.classList.remove("active"))),t.classList.add("active"),H.main.innerHTML="",H.printSidebarLink(t.textContent)}))}))}return{addEventListeners:function(){r.addEventListener("click",H.toggleModal),i.addEventListener("click",H.clearFormInputs),c.addEventListener("click",H.clearFormInputs),a.addEventListener("click",(function(r){r.preventDefault(),H.main.innerHTML="";const o=[...document.querySelectorAll(".sidebar__btn")].find((e=>e.classList.contains("active"))),a=function(e,t,n,r,o){return new m(e,t,n,r,o)}(`${r.target.form.title.value}`,`${e.value}`,`${t.value}`,`${n.value}`,`${o.textContent}`);console.log(o.textContent),function(e,t){console.log(localStorage.getItem(e));const n=JSON.parse(localStorage.getItem(e));console.log(n),n[t.title]=t,console.log(JSON.stringify(n)),localStorage.setItem(e,JSON.stringify(n))}(o.textContent,a),H.printProject(o.textContent),H.clearFormInputs(r),H.newToDoForm.classList.add("hidden")})),o.addEventListener("click",H.toggleModal),l.addEventListener("click",(function(e){var t;e.preventDefault(),console.log(e),t=e.target.form.title.value,localStorage.setItem(t.toLowerCase(),JSON.stringify({})),H.clearFormInputs(e),H.sidebarProjectSection.innerHTML="",H.printProjectButtonsSidebar(),H.newProjectForm.classList.add("hidden"),s([...document.querySelectorAll(".sidebar__btn")])}))},init:function(){H.printProjectButtonsSidebar(),H.printSidebarLink("all");const e=[...document.querySelectorAll(".sidebar__btn")],t=[...document.querySelectorAll(".btn-complete")],n=[...document.querySelectorAll(".btn-delete")],r=[...document.querySelectorAll(".sidebar__btn")].find((e=>e.classList.contains("active")));t.forEach((e=>e.addEventListener("click",b))),n.forEach((e=>e.addEventListener("click",(function(e){console.log(e.currentTarget.parentNode.lastChild.textContent),console.log(e.currentTarget),function(e){console.log(e.currentTarget.parentNode.lastChild.textContent);const t=JSON.parse(localStorage.getItem(e.currentTarget.parentNode.lastChild.textContent));for(const n of Object.values(t))n.title===e.currentTarget.parentNode.childNodes[1].textContent&&(delete t[n.title],localStorage.setItem(e.currentTarget.parentNode.lastChild.textContent,JSON.stringify(t)));console.log(localStorage[e.target.parentNode.parentNode.lastChild.textContent]),C()}(e),console.log(r.textContent),H.printSidebarLink(r.textContent)})))),s(e)}}})();console.log(C()),C(),U.addEventListeners(),U.init()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,