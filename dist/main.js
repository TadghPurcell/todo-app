(()=>{"use strict";var e={151:(e,t,n)=>{n.d(t,{Z:()=>m});var r=n(537),o=n.n(r),a=n(645),i=n.n(a),c=n(667),l=n.n(c),s=new URL(n(985),n.b),d=new URL(n(769),n.b),u=i()(o()),A=l()(s),p=l()(d);u.push([e.id,'@font-face{font-family:"Rubik";src:url('+A+")}*{margin:0;padding:0;box-sizing:inherit}:root{--dark-text: rgb(65, 69, 81);--light-text: rgb(130, 132, 144);--hover-link: rgb(45, 109, 212);--background-col: rgb(246 247 251);--sidebar-col: rgb(26, 26, 33);--box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.075)}body{box-sizing:border-box}.hidden{display:none}button{padding:25px;border:none;cursor:pointer}.project__btn.active{color:var(--hover-link)}button:focus{color:red}svg{height:20px;width:20px}.btn-complete{height:15px;width:15px;background-color:inherit;border-radius:50%;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%)}.btn-complete-container{height:25px;width:25px;border-radius:50%;border:2px solid #000;position:relative}.btn-complete[complete=true]{background-image:url("+p+');background-repeat:no-repeat}.btn-complete-container[priority=high]{border-color:red}.btn-complete-container[priority=medium]{border-color:#ff0}.btn-complete-container[priority=low]{border-color:#adff2f}button,input{font-family:inherit;padding:0;margin:0;box-sizing:inherit;font-size:inherit}form{position:fixed;top:50%;left:50%}.main{border:1px solid #000;background-color:var(--background-col);display:grid;grid-template-columns:1fr;grid-auto-rows:max-content;gap:16px}.main__item{display:flex;align-items:center;justify-content:space-around}header{border:1px solid #000;grid-column:2/3;min-height:75px;display:flex;align-items:center;padding-left:50px;color:var(--light-text);background-color:var(--background-col)}html{height:100%}body{height:inherit;display:grid;grid-template-columns:1fr 4fr;grid-template-rows:max-content 1fr;font-family:"Rubik",Arial,sans-serif}.sidebar,.sidebar__general,.sidebar__projects{display:flex;flex-direction:column;display:flex;flex-direction:column}.sidebar{border:1px solid #000;padding:50px;gap:50px;background-color:var(--sidebar-col);grid-row:1/3}.sidebar__general{color:red}.sidebar__projects{color:var(--light-text)}.sidebar__projects--container{display:flex;flex-direction:column}.sidebar__btn{color:var(--light-text);background-color:inherit}.project__btn{text-transform:capitalize;color:var(--light-text);background-color:inherit}.add-project{color:var(--light-text);background-color:inherit}.add-project:hover{color:var(--hover-link)}',"",{version:3,sources:["webpack://./src/sass/base/typography.scss","webpack://./src/sass/base/base.scss","webpack://./src/sass/components/button.scss","webpack://./src/sass/components/form.scss","webpack://./src/sass/layout/content.scss","webpack://./src/sass/layout/header.scss","webpack://./src/sass/layout/page.scss","webpack://./src/sass/layout/sidebar.scss"],names:[],mappings:"AAAA,WACE,mBAAA,CACA,2CAAA,CCFF,EACE,QAAA,CACA,SAAA,CACA,kBAAA,CAGF,MACE,4BAAA,CACA,gCAAA,CACA,+BAAA,CACA,kCAAA,CACA,8BAAA,CACA,8CAAA,CAGF,KACE,qBAAA,CAGF,QACE,YAAA,CCpBF,OACE,YAAA,CACA,WAAA,CACA,cAAA,CAIF,qBACE,uBAAA,CAGF,aACE,SAAA,CAGF,IACE,WAAA,CACA,UAAA,CAGF,cACE,WAAA,CACA,UAAA,CACA,wBAAA,CAEA,iBAAA,CAEA,iBAAA,CACA,OAAA,CACA,QAAA,CACA,+BAAA,CAGF,wBACE,WAAA,CACA,UAAA,CACA,iBAAA,CACA,qBAAA,CAEA,iBAAA,CAGF,6BACE,wDAAA,CACA,2BAAA,CAGF,uCACE,gBAAA,CAGF,yCACE,iBAAA,CAGF,sCACE,oBAAA,CCxDF,aAEE,mBAAA,CACA,SAAA,CACA,QAAA,CACA,kBAAA,CACA,iBAAA,CAGF,KACE,cAAA,CACA,OAAA,CACA,QAAA,CCZF,MACE,qBAAA,CACA,sCAAA,CACA,YAAA,CACA,yBAAA,CACA,0BAAA,CACA,QAAA,CAEA,YACE,YAAA,CACA,kBAAA,CACA,4BAAA,CCXJ,OACE,qBAAA,CACA,eAAA,CACA,eAAA,CACA,YAAA,CACA,kBAAA,CACA,iBAAA,CACA,uBAAA,CACA,sCAAA,CCRF,KACE,WAAA,CAGF,KACE,cAAA,CACA,YAAA,CACA,6BAAA,CACA,kCAAA,CACA,oCAAA,CCTF,8CAGE,YAAA,CACA,qBAAA,CACA,YAAA,CACA,qBAAA,CAGF,SACE,qBAAA,CACA,YAAA,CACA,QAAA,CACA,mCAAA,CACA,YAAA,CAEA,kBACE,SAAA,CAGF,mBACE,uBAAA,CAEA,8BACE,YAAA,CACA,qBAAA,CAIJ,cACE,uBAAA,CACA,wBAAA,CAKF,cACE,yBAAA,CACA,uBAAA,CACA,wBAAA,CAIJ,aACE,uBAAA,CACA,wBAAA,CACA,mBACE,uBAAA",sourcesContent:["@font-face {\n  font-family: 'Rubik';\n  src: url(../../fonts/Rubik-VariableFont_wght.ttf);\n}\n","* {\n  margin: 0;\n  padding: 0;\n  box-sizing: inherit;\n}\n\n:root {\n  --dark-text: rgb(65, 69, 81);\n  --light-text: rgb(130, 132, 144);\n  --hover-link: rgb(45, 109, 212);\n  --background-col: rgb(246 247 251);\n  --sidebar-col: rgb(26, 26, 33);\n  --box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.075);\n}\n\nbody {\n  box-sizing: border-box;\n}\n\n.hidden {\n  display: none;\n}\n","button {\n  padding: 25px;\n  border: none;\n  cursor: pointer;\n  //   background: white;\n}\n\n.project__btn.active {\n  color: var(--hover-link);\n}\n\nbutton:focus {\n  color: red;\n}\n\nsvg {\n  height: 20px;\n  width: 20px;\n}\n\n.btn-complete {\n  height: 15px;\n  width: 15px;\n  background-color: inherit;\n  // border: 1px solid red;\n  border-radius: 50%;\n  // padding: 100px;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n}\n\n.btn-complete-container {\n  height: 25px;\n  width: 25px;\n  border-radius: 50%;\n  border: 2px solid black;\n  // padding: 5px;\n  position: relative;\n}\n\n.btn-complete[complete='true'] {\n  background-image: url('../../img/check\\ .svg');\n  background-repeat: no-repeat;\n}\n\n.btn-complete-container[priority='high'] {\n  border-color: red;\n}\n\n.btn-complete-container[priority='medium'] {\n  border-color: yellow;\n}\n\n.btn-complete-container[priority='low'] {\n  border-color: greenyellow;\n}\n","button,\ninput {\n  font-family: inherit;\n  padding: 0;\n  margin: 0;\n  box-sizing: inherit;\n  font-size: inherit;\n}\n\nform {\n  position: fixed;\n  top: 50%;\n  left: 50%;\n}\n",".main {\n  border: 1px solid #000;\n  background-color: var(--background-col);\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-auto-rows: max-content;\n  gap: 16px;\n\n  &__item {\n    display: flex;\n    align-items: center;\n    justify-content: space-around;\n  }\n}\n","header {\n  border: 1px solid #000;\n  grid-column: 2 / 3;\n  min-height: 75px;\n  display: flex;\n  align-items: center;\n  padding-left: 50px;\n  color: var(--light-text);\n  background-color: var(--background-col);\n}\n","html {\n  height: 100%;\n}\n\nbody {\n  height: inherit;\n  display: grid;\n  grid-template-columns: 1fr 4fr;\n  grid-template-rows: max-content 1fr;\n  font-family: 'Rubik', Arial, sans-serif;\n}\n",".sidebar,\n.sidebar__general,\n.sidebar__projects {\n  display: flex;\n  flex-direction: column;\n  display: flex;\n  flex-direction: column;\n}\n\n.sidebar {\n  border: 1px solid #000;\n  padding: 50px;\n  gap: 50px;\n  background-color: var(--sidebar-col);\n  grid-row: 1 / 3;\n\n  &__general {\n    color: red;\n  }\n\n  &__projects {\n    color: var(--light-text);\n\n    &--container {\n      display: flex;\n      flex-direction: column;\n    }\n  }\n\n  &__btn {\n    color: var(--light-text);\n    background-color: inherit;\n  }\n}\n\n.project {\n  &__btn {\n    text-transform: capitalize;\n    color: var(--light-text);\n    background-color: inherit;\n  }\n}\n\n.add-project {\n  color: var(--light-text);\n  background-color: inherit;\n  &:hover {\n    color: var(--hover-link);\n  }\n}\n"],sourceRoot:""}]);const m=u},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var c=0;c<this.length;c++){var l=this[c][0];null!=l&&(i[l]=!0)}for(var s=0;s<e.length;s++){var d=[].concat(e[s]);r&&i[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),t.push(d))}},t}},667:e=>{e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]|(%20)/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var a={},i=[],c=0;c<e.length;c++){var l=e[c],s=r.base?l[0]+r.base:l[0],d=a[s]||0,u="".concat(s," ").concat(d);a[s]=d+1;var A=n(u),p={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==A)t[A].references++,t[A].updater(p);else{var m=o(p,r);r.byIndex=c,t.splice(c,0,{identifier:u,updater:m,references:1})}i.push(u)}return i}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var c=n(a[i]);t[c].references--}for(var l=r(e,o),s=0;s<a.length;s++){var d=n(a[s]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}a=l}}},569:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},985:(e,t,n)=>{e.exports=n.p+"img/Rubik-VariableFont_wght.ttf"},769:(e,t,n)=>{e.exports=n.p+"img/check .svg"}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={id:r,exports:{}};return e[r](a,a.exports,n),a.exports}n.m=e,n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),n.b=document.baseURI||self.location.href,n.nc=void 0,(()=>{var e=n(379),t=n.n(e),r=n(795),o=n.n(r),a=n(569),i=n.n(a),c=n(565),l=n.n(c),s=n(216),d=n.n(s),u=n(589),A=n.n(u),p=n(151),m={};m.styleTagTransform=A(),m.setAttributes=l(),m.insert=i().bind(null,"head"),m.domAPI=o(),m.insertStyleElement=d(),t()(p.Z,m),p.Z&&p.Z.locals&&p.Z.locals;let f,g,C=[],b=[];class h{constructor(e="test",t="test",n,r,o){this.title=e,this.desc=t,this.dueDate=n,this.priority=r,this.project=o,this.dateCreated=+new Date,this.complete=!1}}function v(){C=[];for(const e of Object.values(localStorage))for(const t of Object.values(JSON.parse(e)))C.push(t);return C.sort(((e,t)=>t.dateCreated-e.dateCreated))}function y(e){console.log(e.currentTarget.parentNode.parentNode.lastChild.textContent);const t=JSON.parse(localStorage.getItem(e.currentTarget.parentNode.parentNode.lastChild.textContent));for(const n of Object.values(t))n.title===e.currentTarget.parentNode.nextSibling.textContent&&(n.complete?e.currentTarget.attributes.complete.value="false":e.currentTarget.attributes.complete.value="true",n.complete=!n.complete,localStorage.setItem(e.currentTarget.parentNode.parentNode.lastChild.textContent,JSON.stringify(t)));return $.main.innerHTML="",$.printSidebarLink(document.querySelector(".active").textContent),console.log(localStorage[e.currentTarget.parentNode.lastChild.textContent]),v()}function x(e){console.log(e.currentTarget.parentNode.lastChild.textContent);const t=JSON.parse(localStorage.getItem(e.currentTarget.parentNode.lastChild.textContent));for(const n of Object.values(t))n.title===e.currentTarget.parentNode.childNodes[1].textContent&&(delete t[n.title],localStorage.setItem(e.currentTarget.parentNode.lastChild.textContent,JSON.stringify(t)));return $.main.innerHTML="",$.printSidebarLink(document.querySelector(".active").textContent),console.log(localStorage[e.target.parentNode.parentNode.lastChild.textContent]),v()}function S(e){f={},g="",g=e,f=JSON.parse(localStorage.getItem(e))}function w(e){console.log(e.currentTarget.parentNode.firstChild.textContent),localStorage.removeItem(e.currentTarget.parentNode.firstChild.textContent)}function E(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function k(e){return k="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},k(e)}function L(e){E(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"===k(e)&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function N(e){E(1,arguments);var t=L(e);return t.setHours(0,0,0,0),t}Math.pow(10,8);var T=6e4,j=36e5;function B(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function _(e,t){var n;E(1,arguments);var r=B(null!==(n=null==t?void 0:t.additionalDigits)&&void 0!==n?n:2);if(2!==r&&1!==r&&0!==r)throw new RangeError("additionalDigits must be 0, 1 or 2");if("string"!=typeof e&&"[object String]"!==Object.prototype.toString.call(e))return new Date(NaN);var o,a=function(e){var t,n={},r=e.split(D.dateTimeDelimiter);if(r.length>2)return n;if(/:/.test(r[0])?t=r[0]:(n.date=r[0],t=r[1],D.timeZoneDelimiter.test(n.date)&&(n.date=e.split(D.timeZoneDelimiter)[0],t=e.substr(n.date.length,e.length))),t){var o=D.timezone.exec(t);o?(n.time=t.replace(o[1],""),n.timezone=o[1]):n.time=t}return n}(e);if(a.date){var i=function(e,t){var n=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+t)+"})|(\\d{2}|[+-]\\d{"+(2+t)+"})$)"),r=e.match(n);if(!r)return{year:NaN,restDateString:""};var o=r[1]?parseInt(r[1]):null,a=r[2]?parseInt(r[2]):null;return{year:null===a?o:100*a,restDateString:e.slice((r[1]||r[2]).length)}}(a.date,r);o=function(e,t){if(null===t)return new Date(NaN);var n=e.match(F);if(!n)return new Date(NaN);var r=!!n[4],o=I(n[1]),a=I(n[2])-1,i=I(n[3]),c=I(n[4]),l=I(n[5])-1;if(r)return function(e,t,n){return t>=1&&t<=53&&n>=0&&n<=6}(0,c,l)?function(e,t,n){var r=new Date(0);r.setUTCFullYear(e,0,4);var o=7*(t-1)+n+1-(r.getUTCDay()||7);return r.setUTCDate(r.getUTCDate()+o),r}(t,c,l):new Date(NaN);var s=new Date(0);return function(e,t,n){return t>=0&&t<=11&&n>=1&&n<=(H[t]||(P(e)?29:28))}(t,a,i)&&function(e,t){return t>=1&&t<=(P(e)?366:365)}(t,o)?(s.setUTCFullYear(t,a,Math.max(o,i)),s):new Date(NaN)}(i.restDateString,i.year)}if(!o||isNaN(o.getTime()))return new Date(NaN);var c,l=o.getTime(),s=0;if(a.time&&(s=function(e){var t=e.match(O);if(!t)return NaN;var n=M(t[1]),r=M(t[2]),o=M(t[3]);return function(e,t,n){return 24===e?0===t&&0===n:n>=0&&n<60&&t>=0&&t<60&&e>=0&&e<25}(n,r,o)?n*j+r*T+1e3*o:NaN}(a.time),isNaN(s)))return new Date(NaN);if(!a.timezone){var d=new Date(l+s),u=new Date(0);return u.setFullYear(d.getUTCFullYear(),d.getUTCMonth(),d.getUTCDate()),u.setHours(d.getUTCHours(),d.getUTCMinutes(),d.getUTCSeconds(),d.getUTCMilliseconds()),u}return c=function(e){if("Z"===e)return 0;var t=e.match(q);if(!t)return 0;var n="+"===t[1]?-1:1,r=parseInt(t[2]),o=t[3]&&parseInt(t[3])||0;return function(e,t){return t>=0&&t<=59}(0,o)?n*(r*j+o*T):NaN}(a.timezone),isNaN(c)?new Date(NaN):new Date(l+s+c)}var D={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},F=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,O=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,q=/^([+-])(\d{2})(?::?(\d{2}))?$/;function I(e){return e?parseInt(e):1}function M(e){return e&&parseFloat(e.replace(",","."))||0}var H=[31,null,31,30,31,30,31,31,30,31,30,31];function P(e){return e%400==0||e%4==0&&e%100!=0}var U={};function J(){return U}function V(e,t){var n,r,o,a,i,c,l,s;E(1,arguments);var d=J(),u=B(null!==(n=null!==(r=null!==(o=null!==(a=null==t?void 0:t.weekStartsOn)&&void 0!==a?a:null==t||null===(i=t.locale)||void 0===i||null===(c=i.options)||void 0===c?void 0:c.weekStartsOn)&&void 0!==o?o:d.weekStartsOn)&&void 0!==r?r:null===(l=d.locale)||void 0===l||null===(s=l.options)||void 0===s?void 0:s.weekStartsOn)&&void 0!==n?n:0);if(!(u>=0&&u<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var A=L(e),p=A.getDay(),m=(p<u?7:0)+p-u;return A.setDate(A.getDate()-m),A.setHours(0,0,0,0),A}const R=(()=>{const e=document.querySelector("main"),t=(document.querySelector("aside"),document.querySelector(".sidebar__projects--container")),n=document.querySelector(".new-project-form"),r=document.querySelector(".new-todo-form"),o=document.querySelector(".new-todo-form__buttons"),a=document.querySelector(".edit-todo"),i=document.querySelector(".new-project"),c=document.querySelector(".edit-project");function l(e){e.preventDefault(),console.log(e.target.form),console.log(e.target.form.length),e.target.form.length>4?(e.target.form.title.value="",e.target.form.desc.value="",e.target.form["due-date"].value="",e.target.form.priority.value=""):e.target.form.title.value="",o.innerHTML="",o.appendChild(function(){const e=document.createElement("button");return e.classList.add("btn","btn-clear-form"),e.textContent="Clear",e.addEventListener("click",l),e}())}function s(t){const n=document.createElement("div");n.classList.add("main__item");const a=document.createElement("h3");a.classList.add("title"),a.textContent=`${t.title||""}`;const i=document.createElement("p");i.classList.add("desc"),i.textContent=`${t.desc||""}`;const c=document.createElement("p");c.classList.add("due-date"),c.textContent=`${t.dueDate||""}`;const s=document.createElement("p");s.classList.add("priority"),s.textContent=`${t.priority||""}`;const d=document.createElement("div");d.classList.add("btn-complete-container"),d.setAttribute("priority",t.priority);const p=document.createElement("button");p.classList.add("btn-complete"),p.setAttribute("complete",t.complete?"true":"false"),p.addEventListener("click",y),d.appendChild(p);const m=document.createElement("button");m.classList.add("btn-edit"),m.textContent="edit",m.addEventListener("click",(function(n){!function(e){console.log(e.currentTarget.parentNode)}(n),"Edit"!==o.firstElementChild.textContent&&o.insertBefore(function(){const t=document.createElement("button");return t.classList.add("btn","btn-edit-form","new-todo"),t.textContent="Edit",t.addEventListener("click",(function(n){n.preventDefault();const o=[...document.querySelectorAll(".sidebar__btn")].find((e=>e.classList.contains("active")));console.log(n.currentTarget.form.title.value),t.form.checkValidity()&&(e.innerHTML="",function(e){console.log(b),console.log(b[4]),console.log(b[1]);const t=JSON.parse(localStorage.getItem(b[4]));for(const n of Object.values(t))n.title===b[0]&&(delete t[n.title],t[e.currentTarget.form.title.value]={title:e.currentTarget.form.title.value,desc:e.currentTarget.form.desc.value,dueDate:e.currentTarget.form["due-date"].value,priority:e.currentTarget.form.priority.value,project:b[4],dateCreated:b[5],complete:!1},localStorage.setItem(b[4],JSON.stringify(t)));console.log(localStorage[b[4]])}(n),console.log(o.textContent),A(o.textContent),l(n),r.classList.add("hidden"))})),t}(),o.firstChild),u("btn-add-todo");const a=document.querySelector("#title-form"),i=document.querySelector("#desc"),c=document.querySelector("#due-date"),s=document.querySelector("#priority"),d=(new Date).toISOString().split("T")[0];c.setAttribute("min",d),function(e,t){b=[];const n=JSON.parse(localStorage.getItem(t));for(const t of Object.values(n))if(t.title===e)for(const e of Object.values(n[t.title]))b.push(e);console.log(b)}(t.title,t.project),a.value=t.title,i.value=t.desc,c.value=t.dueDate,s.value=t.priority}));const f=document.createElement("button");f.classList.add("btn-delete"),f.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" viewBox="4 3 16 18"><path d="M9,3V4H4V6H5V19A2,2 0 0,0 7,21H17A2,2 0 0,0 19,19V6H20V4H15V3H9M7,6H17V19H7V6M9,8V17H11V8H9M13,8V17H15V8H13Z" /></svg>',f.addEventListener("click",x);const g=document.createElement("div");return g.textContent=t.project,g.classList.add("hidden"),n.appendChild(d),n.appendChild(a),n.appendChild(i),n.appendChild(c),n.appendChild(s),n.appendChild(m),n.appendChild(f),n.appendChild(g),n}function d(t){const n=document.createElement("button");let a;n.classList.add("btn-add-todo"),n.textContent="add to do",e.appendChild(n),n.addEventListener("click",(function(t){u(t),"Add"!==o.firstElementChild.textContent&&o.insertBefore(function(){const t=document.createElement("button");return t.classList.add("btn","btn-add-form","new-todo"),t.textContent="Add",t.addEventListener("click",(function(n){n.preventDefault(),console.log("well man"),console.log(t.form.checkValidity());const o=[...document.querySelectorAll(".sidebar__btn")].find((e=>e.classList.contains("active"))),a=function(e,t,n,r,o){return new h(e,t,n,r,o)}(`${n.target.form.title.value}`,`${n.target.form.desc.value}`,`${n.target.form["due-date"].value}`,`${n.target.form.priority.value}`,`${o.textContent}`);t.form.checkValidity()&&(e.innerHTML="",console.log(o.textContent),function(e,t){console.log(localStorage.getItem(e)),console.log(e);const n=JSON.parse(localStorage.getItem(e));console.log(n),n[t.title]=t,console.log(JSON.stringify(n)),localStorage.setItem(e,JSON.stringify(n))}(o.textContent,a),A(o.textContent),l(n),r.classList.add("hidden"))})),t}(),o.firstChild);const n=document.querySelector("#title-form"),a=document.querySelector("#desc"),i=document.querySelector("#due-date"),c=document.querySelector("#priority");console.log(n),n.value="",a.value="",i.value="",c.value="";const s=(new Date).toISOString().split("T")[0];document.querySelector("#due-date").setAttribute("min",s)}));const i=[];if(JSON.parse(localStorage.getItem(t))){a=JSON.parse(localStorage.getItem(t));for(const[e,t]of Object.entries(a))i.push(t);i.sort(((e,t)=>t.dateCreated-e.dateCreated)).forEach((t=>e.appendChild(s(t))))}}function u(e){"add-project"!==e.target?.classList.value&&"add-project"!==e||(n.classList.toggle("hidden"),r.classList.add("hidden")),"btn-add-todo"!==e.target?.classList.value&&"btn-add-todo"!==e||(r.classList.toggle("hidden"),n.classList.add("hidden"))}function A(t){e.innerHTML="","all"===t&&(console.log(v()),v().forEach((t=>e.appendChild(s(t))))),"today"===t&&v().filter((e=>function(e){return E(1,arguments),function(e,t){E(2,arguments);var n=N(e),r=N(t);return n.getTime()===r.getTime()}(e,Date.now())}(_(e.dueDate)))).forEach((t=>e.appendChild(s(t)))),"this week"===t&&v().filter((e=>function(e,t){return E(1,arguments),function(e,t,n){E(2,arguments);var r=V(e,n),o=V(t,n);return r.getTime()===o.getTime()}(e,Date.now(),t)}(_(e.dueDate)))).forEach((t=>e.appendChild(s(t)))),"important"===t&&v().filter((e=>"high"===e.priority)).forEach((t=>e.appendChild(s(t)))),"complete"===t&&v().filter((e=>e.complete)).forEach((t=>e.appendChild(s(t)))),localStorage.hasOwnProperty(t)&&d(t)}return{main:e,clearFormInputs:l,btnEditToDoForm:a,toggleModal:u,sidebarProjectSection:t,printProjectButtonsSidebar:function(){for(const n of Object.keys(localStorage).map((e=>e.toLowerCase())).sort()){const r=document.createElement("div"),o=document.createElement("button");o.classList.add("sidebar__btn"),o.textContent=n,o.addEventListener("click",(function(t){[...document.querySelectorAll(".sidebar__btn")].forEach((e=>e.classList.remove("active"))),t.currentTarget.classList.add("active"),e.innerHTML="",A(t.currentTarget.textContent)}));const a=document.createElement("button");a.classList.add("btn-delete-project"),a.textContent="delete",a.addEventListener("click",(function(n){w(n),e.innerHTML="",t.innerHTML="",G.addEventListeners(),G.init()}));const l=document.createElement("button");l.classList.add("btn-edit-project"),l.textContent="gedit",l.addEventListener("click",(function(e){S(e.currentTarget.parentNode.firstChild.textContent),u("add-project"),i.classList.add("hidden"),c.classList.remove("hidden");const t=document.querySelector("#title-project");console.log(e.currentTarget.parentNode.firstChild.textContent),t.value=e.currentTarget.parentNode.firstChild.textContent})),r.appendChild(o),r.appendChild(l),r.appendChild(a),t.appendChild(r)}},newProjectForm:n,newToDoForm:r,printProject:d,printSidebarLink:A,btnAddProjectForm:i,btnEditProjectForm:c}})(),$=R,G=(()=>{document.querySelector("#desc"),document.querySelector("#due-date"),document.querySelector("#priority");const e=document.querySelector(".add-project"),t=document.querySelector(".new-project"),n=document.querySelector(".btn-reset-project"),r=document.querySelector(".btn-reset-form");function o(e){e.forEach((t=>{t.addEventListener("click",(function(){e.forEach((e=>e.classList.remove("active"))),t.classList.add("active"),$.main.innerHTML="",$.printSidebarLink(t.textContent)}))}))}return $.btnEditProjectForm.addEventListener("click",(function(e){e.preventDefault(),console.log(e.currentTarget.parentNode),$.btnEditProjectForm.form.checkValidity()&&t.classList.contains("hidden")&&($.main.innerHTML="",function(e){console.log(g),console.log(e),localStorage.removeItem(g),localStorage.setItem(e,JSON.stringify(f))}(e.currentTarget.form.title.value),$.printSidebarLink(e.currentTarget.form.title.value),$.sidebarProjectSection.innerHTML="",$.printProjectButtonsSidebar(),$.clearFormInputs(e),$.newProjectForm.classList.add("hidden"),$.btnAddProjectForm.classList.add("hidden"),$.btnEditProjectForm.classList.add("hidden"))})),{addEventListeners:function(){const a=[...document.querySelectorAll(".sidebar__btn")];e.addEventListener("click",(function(e){$.toggleModal(e),$.btnEditProjectForm.classList.add("hidden"),t.classList.remove("hidden")})),n.addEventListener("click",$.clearFormInputs),r.addEventListener("click",$.clearFormInputs),t.addEventListener("click",(function(e){var n;e.preventDefault(),t.form.checkValidity()&&$.btnEditProjectForm.classList.contains("hidden")&&(n=e.target.form.title.value,localStorage.setItem(n.toLowerCase(),JSON.stringify({})),$.clearFormInputs(e),$.sidebarProjectSection.innerHTML="",$.printProjectButtonsSidebar(),$.newProjectForm.classList.add("hidden"),o(a))}))},init:function(){$.printProjectButtonsSidebar(),$.printSidebarLink("all"),o([...document.querySelectorAll(".sidebar__btn")])}}})();console.log(v()),v(),window.addEventListener("click",(()=>G.addEventListeners)),G.addEventListeners(),G.init()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,